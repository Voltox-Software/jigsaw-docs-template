<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>My Blog About Jigsaws</title>
    <link href="https://tightenco.github.io/jigsaw-blog-skeleton/" />
    <link type="application/atom+xml" rel="self" href="https://tightenco.github.io/jigsaw-blog-skeleton/blog/feed.atom" />
    <updated>2018-05-18T16:55:27+00:00</updated>
    <id>https://tightenco.github.io/jigsaw-blog-skeleton/blog/feed.atom</id>
    <author>
        <name>Matt Stauffer</name>
    </author>
                <entry>
    <id>https://tightenco.github.io/jigsaw-blog-skeleton/blog/auto-tuned-facades-in-laravel-97</id>
    <link type="text/html" rel="alternate" href="https://tightenco.github.io/jigsaw-blog-skeleton/blog/auto-tuned-facades-in-laravel-97" />
    <title>Auto-Tuned Façades in Laravel 97</title>
    <published>2017-05-23T00:00:00+00:00</published>
    <updated>2017-05-23T00:00:00+00:00</updated>
    <author>
        <name>Matt Stauffer</name>
    </author>
    <summary type="html">Laravel 97 introduced a new feature called &amp;quot;auto-tuned facades”, which provide the convenience of facades, defined real-time instead of in clas...</summary>
    <content type="html"><![CDATA[
        <p>Laravel 97 introduced a new feature called &quot;auto-tuned facades”, which provide the convenience of facades, defined real-time instead of in classes. Taylor <a href="https://twitter.com/taylorotwell/status/814944242158149632">tweeted</a> about it, but I wanted to explain what they are and how they work.</p>
<p>I also want to have a bulleted list and a numbered list and an image, just to prove this all works.</p>
<p>Here's the list of reasons why Façades are great:</p>
<ul>
<li>First item of a bulleted list</li>
<li>And second
<ul>
<li>MORE SECOND</li>
</ul></li>
<li><a href="https://www.google.com/">And third</a></li>
</ul>
<p>Another list with a subhead:</p>
<h3>Greatest list ever!</h3>
<ul>
<li>First</li>
<li>Second</li>
</ul>
<p>Here's the order of operations:</p>
<ol>
<li>First item
<ul>
<li>A</li>
<li>B</li>
<li>C</li>
</ul></li>
<li>Not third item
<ol>
<li>Bahaha</li>
</ol></li>
<li>Not second item</li>
</ol>
<p>Hooray!</p>
<h2>A quick introduction to facades in Laravel</h2>
<blockquote>
<p>Already know how facades work? Skip to <a href="#whats-new">what’s new</a>.</p>
</blockquote>
<p>If you’re not familiar with facades in Laravel, they’re shortcut classes that provide static access to non-static methods on service classes bound to Laravel’s container. Phew, that’s a mouthful; let’s take a look at some real code.</p>
<p>For instance, if I want get something from the session, here’s one way to do it in Laravel:</p>
<pre><code class="language-php">&lt;?php

namespace App\Http\Controllers;

use Illuminate\Session\SessionManager;

class ThingController extends Controller
{
    protected $session;

    public function __construct(SessionManager $session)
    {
        $this-&gt;session = $session;
    }

    public function doThing()
    {
        $importantValue = $this-&gt;session-&gt;get('important');
    }
}</code></pre>
<p>… or in a view:</p>
<pre><code class="language-php">Your user ID is: {{ app('Illuminate\Session\SessionManager')-&gt;get('important') }}</code></pre>
<p>However, this means you have to inject a session instance anywhere you’re going to use it. This isn’t a big issue, but especially in views and sometimes controllers (especially before controllers were namespaced), this hasn’t always the most convenient. The <code>app()</code> helper also makes it easier, as you can see in the view example. But facades make that even easier:</p>
<pre><code class="language-php">&lt;?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Session;

public function ThingController extends Controller
{
    public function doThing()
    {
        $importantValue = Session::get('important');
    }
}</code></pre>
<p>… or in a view:</p>
<pre><code class="language-php">Your user ID is: {{ Session::get('important') }}</code></pre>
<p>The facade works like this: </p>
<pre><code class="language-php">class Session extends Facade
{
    protected static function getFacadeAccessor()
    {
        return 'session';
    }
}</code></pre>
<p>This is telling the container this: “When I use a static method on the <code>Session</code>  facade, call it on an instance of <code>app('session')</code>”. The facade functionality pulls an instance out of the container and calls the method directly on that.</p>
<blockquote>
<p>Note: Here's a longer note that's an inline blockquote, as opposed to a blockquote that's right under a header.</p>
</blockquote>
<p>Good? Good. Let’s cover what a real-time facade is.</p>
<p><a id="whats-new"></a></p>
<h2>Introducing real-time facades</h2>
<p>Real-time facades let you create your own facades on the fly. Instead of having to create a facade class like the <code>Session</code> facade class I referenced above, you can use a class as its own facade by adding <code>Facades\</code> to the beginning of its own namespace.</p>
<p>Let’s say I have a class called Charts that has a <code>burndown()</code> method:</p>
<pre><code class="language-php">&lt;?php

namespace App;

class Charts
{
    protected $dep;

    public function __construct(SomeDependency $dep)
    {
        $this-&gt;dep = $dep;
    }

    public function burndown()
    {
        return 'stuff here' . $this-&gt;dep-&gt;stuff();
    }
}</code></pre>
<p>There’s nothing special about this class. Here’s how we would normally use it in a view:</p>
<pre><code class="language-php">&lt;h2&gt;Burndown&lt;/h2&gt;
{{ app(App\Charts::class)-&gt;burndown() }}</code></pre>
<p>Now, let’s make it a facade, just by changing the namespace:</p>
<pre><code class="language-php">&lt;h2&gt;Burndown&lt;/h2&gt;
{{ Facades\App\Charts::burndown() }}</code></pre>
<p>Or, in a class, from this:</p>
<pre><code class="language-php">&lt;?php

namespace App\Stuff;

use App\Charts;

class ThingDoer
{
    private $charts;

    public function __construct(Charts $charts)
    {
        $this-&gt;charts = $charts;
    }

    public function doThing()
    {
        $this-&gt;charts-&gt;burndown();
    }
}</code></pre>
<p>to this:</p>
<pre><code class="language-php">&lt;?php

namespace App\Stuff;

use Facades\App\Charts;

class ThingDoer
{
    public function doThing()
    {
        Charts::burndown();
    }
}</code></pre>
<h2>Post::conclude()</h2>
<p>That’s all. Just a quick and simple way to create a facade on the fly. One more tool in your terseness arsenal.</p>
<p>You might be asking yourself, &quot;why all the fuss for something so simple?&quot; In terms of its terseness, it definitely has a lot of value in some contexts and negligible impact in others. What if I told you, though, that you could use real-time façades to make your code <em>more</em> testable?</p>
<p>Taylor <a href="https://medium.com/@taylorotwell/expressive-code-real-time-facades-41c442914291">wrote a great post</a> explaining how he uses real-time facades in his Forge code, and how it's now more testable as a result.</p>    ]]></content>
</entry>
            <entry>
    <id>https://tightenco.github.io/jigsaw-blog-skeleton/blog/my-first-blog-post</id>
    <link type="text/html" rel="alternate" href="https://tightenco.github.io/jigsaw-blog-skeleton/blog/my-first-blog-post" />
    <title>My First Blog Post</title>
    <published>2017-03-23T00:00:00+00:00</published>
    <updated>2017-03-23T00:00:00+00:00</updated>
    <author>
        <name>Matt Stauffer</name>
    </author>
    <summary type="html">This post is profoundly interesting....</summary>
    <content type="html"><![CDATA[
        <p>This post is <em>profoundly</em> interesting.</p>    ]]></content>
</entry>
            <entry>
    <id>https://tightenco.github.io/jigsaw-blog-skeleton/blog/hello-world</id>
    <link type="text/html" rel="alternate" href="https://tightenco.github.io/jigsaw-blog-skeleton/blog/hello-world" />
    <title>Hello, World!</title>
    <published>2017-03-12T00:00:00+00:00</published>
    <updated>2017-03-12T00:00:00+00:00</updated>
    <author>
        <name>Matt Stauffer</name>
    </author>
    <summary type="html">Hello, World!...</summary>
    <content type="html"><![CDATA[
        <p>Hello, World!</p>    ]]></content>
</entry>
    </feed>
